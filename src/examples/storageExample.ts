import type { FileUpload } from '../services/storageService';
import { StorageService } from '../services/storageService';

/**
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Supabase Storage
 */
export class StorageExample {
  
  /**
   * –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤
   */
  static async createBucketsExample() {
    console.log('ü™£ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤...');
    
    try {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∫–µ—Ç –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
      const audioBucket = await StorageService.createBucket('audio-files', true, {
        fileSizeLimit: 50 * 1024 * 1024, // 50MB
        allowedMimeTypes: ['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/mp4']
      });

      // –°–æ–∑–¥–∞–µ–º –±–∞–∫–µ—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageBucket = await StorageService.createBucket('slide-images', true, {
        fileSizeLimit: 10 * 1024 * 1024, // 10MB
        allowedMimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp']
      });

      console.log('‚úÖ –ë–∞–∫–µ—Ç –¥–ª—è –∞—É–¥–∏–æ:', audioBucket ? '—Å–æ–∑–¥–∞–Ω' : '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('‚úÖ –ë–∞–∫–µ—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', imageBucket ? '—Å–æ–∑–¥–∞–Ω' : '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      return { audioBucket, imageBucket };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∫–µ—Ç–æ–≤:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞–∫–µ—Ç–æ–≤
   */
  static async getBucketsExample() {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–∫–µ—Ç–æ–≤...');
    
    const buckets = await StorageService.getBuckets();
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–∞–∫–µ—Ç—ã:');
    buckets.forEach(bucket => {
      console.log(`  ü™£ ${bucket.name} (–ø—É–±–ª–∏—á–Ω—ã–π: ${bucket.public ? '–¥–∞' : '–Ω–µ—Ç'})`);
      console.log(`     –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${bucket.file_size_limit ? `${bucket.file_size_limit / 1024 / 1024}MB` : '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}`);
      console.log(`     MIME —Ç–∏–ø—ã: ${bucket.allowed_mime_types?.join(', ') || '–≤—Å–µ'}`);
    });
    
    return buckets;
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async uploadAudioExample(projectId: string, audioFile: File) {
    console.log('üéµ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...');
    
    const result = await StorageService.uploadAudioForProject(projectId, audioFile);
    
    if (result) {
      console.log('‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:');
      console.log(`  üìÅ –ü—É—Ç—å: ${result.path}`);
      console.log(`  üîó URL: ${result.url}`);
      console.log(`  üìä –†–∞–∑–º–µ—Ä: ${audioFile.size} –±–∞–π—Ç`);
      console.log(`  üéµ –¢–∏–ø: ${audioFile.type}`);
      return result;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞');
      return null;
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–∞
   */
  static async uploadImageExample(projectId: string, slideId: string, imageFile: File) {
    console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    const result = await StorageService.uploadImageForSlide(projectId, slideId, imageFile);
    
    if (result) {
      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:');
      console.log(`  üìÅ –ü—É—Ç—å: ${result.path}`);
      console.log(`  üîó URL: ${result.url}`);
      console.log(`  üìä –†–∞–∑–º–µ—Ä: ${imageFile.size} –±–∞–π—Ç`);
      console.log(`  üñºÔ∏è –¢–∏–ø: ${imageFile.type}`);
      return result;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return null;
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
   */
  static async uploadMultipleFilesExample(projectId: string, files: File[]) {
    console.log('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...');
    
    const fileUploads: FileUpload[] = files.map((file, index) => ({
      file,
      path: `uploads/${projectId}/${Date.now()}-${index}-${file.name}`,
      options: {
        cacheControl: '3600',
        upsert: false
      }
    }));

    const results = await StorageService.uploadMultipleFiles('audio-files', fileUploads);
    
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:');
    results.forEach((result, index) => {
      if (result) {
        console.log(`  üìÑ ${files[index].name}: –∑–∞–≥—Ä—É–∂–µ–Ω (${result.path})`);
      } else {
        console.log(`  ‚ùå ${files[index].name}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏`);
      }
    });
    
    return results;
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async getProjectFilesExample(projectId: string) {
    console.log('üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    const projectFiles = await StorageService.getProjectFiles(projectId);
    
    console.log('‚úÖ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:');
    console.log(`  üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã: ${projectFiles.audio.length}`);
    projectFiles.audio.forEach(file => {
      console.log(`    - ${file.name} (${file.metadata.size} –±–∞–π—Ç)`);
    });
    
    console.log(`  üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${projectFiles.images.length}`);
    projectFiles.images.forEach(file => {
      console.log(`    - ${file.name} (${file.metadata.size} –±–∞–π—Ç)`);
    });
    
    return projectFiles;
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
   */
  static async getPublicUrlExample(bucketName: string, filePath: string) {
    console.log('üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL...');
    
    const publicUrl = StorageService.getPublicUrl(bucketName, filePath);
    
    console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π URL:');
    console.log(`  üîó ${publicUrl}`);
    
    return publicUrl;
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL
   */
  static async getSignedUrlExample(bucketName: string, filePath: string) {
    console.log('üîê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL...');
    
    const signedUrl = await StorageService.getSignedUrl(bucketName, filePath, 3600);
    
    if (signedUrl) {
      console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —á–∞—Å):');
      console.log(`  üîê ${signedUrl}`);
      return signedUrl;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL');
      return null;
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
   */
  static async downloadFileExample(bucketName: string, filePath: string) {
    console.log('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...');
    
    const blob = await StorageService.downloadFile(bucketName, filePath);
    
    if (blob) {
      console.log('‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω:');
      console.log(`  üìä –†–∞–∑–º–µ—Ä: ${blob.size} –±–∞–π—Ç`);
      console.log(`  üéØ –¢–∏–ø: ${blob.type}`);
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = URL.createObjectURL(blob);
      console.log(`  üîó URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${url}`);
      
      return { blob, url };
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
      return null;
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
   */
  static async deleteFileExample(bucketName: string, filePaths: string[]) {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
    
    const result = await StorageService.deleteFile(bucketName, filePaths);
    
    if (result) {
      console.log('‚úÖ –§–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã:');
      filePaths.forEach(path => {
        console.log(`  üóëÔ∏è ${path}`);
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤');
    }
    
    return result;
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞
   */
  static async moveFileExample(bucketName: string, fromPath: string, toPath: string) {
    console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...');
    
    const result = await StorageService.moveFile(bucketName, fromPath, toPath);
    
    if (result) {
      console.log('‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω:');
      console.log(`  üìÅ –ò–∑: ${fromPath}`);
      console.log(`  üìÅ –í: ${toPath}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    }
    
    return result;
  }

  /**
   * –ü—Ä–∏–º–µ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
   */
  static async copyFileExample(bucketName: string, fromPath: string, toPath: string) {
    console.log('üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...');
    
    const result = await StorageService.copyFile(bucketName, fromPath, toPath);
    
    if (result) {
      console.log('‚úÖ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:');
      console.log(`  üìÅ –ò–∑: ${fromPath}`);
      console.log(`  üìÅ –í: ${toPath}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    }
    
    return result;
  }

  /**
   * –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å Storage
   */
  static async fullStorageExample() {
    console.log('üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å Storage...\n');
    
    try {
      // 1. –°–æ–∑–¥–∞–µ–º –±–∞–∫–µ—Ç—ã
      await this.createBucketsExample();
      
      console.log('\n' + '='.repeat(50) + '\n');
      
      // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–∫–µ—Ç–æ–≤
      await this.getBucketsExample();
      
      console.log('\n' + '='.repeat(50) + '\n');
      
      // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
      const projectId = 'test-project-' + Date.now();
      const slideId = 'test-slide-' + Date.now();
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (–ø—É—Å—Ç–æ–π)
      const audioBlob = new Blob(['test audio content'], { type: 'audio/mpeg' });
      const audioFile = new File([audioBlob], 'test-audio.mp3', { type: 'audio/mpeg' });
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–µ)
      const imageBlob = new Blob(['test image content'], { type: 'image/jpeg' });
      const imageFile = new File([imageBlob], 'test-image.jpg', { type: 'image/jpeg' });
      
      // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
      const audioResult = await this.uploadAudioExample(projectId, audioFile);
      
      console.log('\n' + '='.repeat(50) + '\n');
      
      // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageResult = await this.uploadImageExample(projectId, slideId, imageFile);
      
      console.log('\n' + '='.repeat(50) + '\n');
      
      // 6. –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
      await this.getProjectFilesExample(projectId);
      
      console.log('\n' + '='.repeat(50) + '\n');
      
      // 7. –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ URL
      if (audioResult) {
        await this.getPublicUrlExample('audio-files', audioResult.path);
      }
      
      console.log('\n' + '='.repeat(50) + '\n');
      
      // 8. –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL
      if (imageResult) {
        await this.getSignedUrlExample('slide-images', imageResult.path);
      }
      
      console.log('\nüéâ –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å Storage –∑–∞–≤–µ—Ä—à–µ–Ω!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –≤ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
   */
  static createFileUploadHandler(projectId: string, slideId?: string) {
    return async (event: React.ChangeEvent<HTMLInputElement>) => {
      const files = event.target.files;
      if (!files || files.length === 0) return;

      const file = files[0];
      
      try {
        let result;
        if (file.type.startsWith('audio/')) {
          result = await StorageService.uploadAudioForProject(projectId, file, slideId);
        } else if (file.type.startsWith('image/')) {
          if (!slideId) {
            console.error('–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è slideId');
            return;
          }
          result = await StorageService.uploadImageForSlide(projectId, slideId, file);
        } else {
          console.error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞');
          return;
        }

        if (result) {
          console.log('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', result.url);
          return result;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
      }
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export default StorageExample;
