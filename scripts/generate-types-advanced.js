import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–∏–ø–æ–≤ –¥–ª—è Supabase
async function generateTypesFromSupabase() {
  const supabaseUrl = process.env.VITE_SUPABASE_URL;
  const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseKey) {
    console.log('‚ö†Ô∏è  Supabase URL –∏–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('üìù –°–æ–∑–¥–∞—é –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã...');
    generateBasicTypes();
    return;
  }

  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –∏–∑ Supabase
    // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
    generateBasicTypes();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤:', error);
    console.log('üìù –°–æ–∑–¥–∞—é –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã...');
    generateBasicTypes();
  }
}

function generateBasicTypes() {
  const typesContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è Supabase
// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toISOString()}

export interface Database {
  public: {
    Tables: {
      projects: {
        Row: {
          id: string;
          name: string;
          description: string | null;
          status: 'in-progress' | 'completed';
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          name: string;
          description?: string | null;
          status?: 'in-progress' | 'completed';
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          name?: string;
          description?: string | null;
          status?: 'in-progress' | 'completed';
          created_at?: string;
          updated_at?: string;
        };
        Relationships: [];
      };
      slides: {
        Row: {
          id: string;
          project_id: string;
          title: string | null;
          content: any;
          order_index: number;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          project_id: string;
          title?: string | null;
          content?: any;
          order_index?: number;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          project_id?: string;
          title?: string | null;
          content?: any;
          order_index?: number;
          created_at?: string;
          updated_at?: string;
        };
        Relationships: [
          {
            foreignKeyName: "slides_project_id_fkey";
            columns: ["project_id"];
            isOneToOne: false;
            referencedRelation: "projects";
            referencedColumns: ["id"];
          }
        ];
      };
    };
    Views: {
      projects_with_stats: {
        Row: {
          id: string;
          name: string;
          description: string | null;
          status: 'in-progress' | 'completed';
          created_at: string;
          updated_at: string;
          slide_count: number;
          last_activity: string;
        };
        Relationships: [];
      };
    };
    Functions: {
      get_project_with_slides: {
        Args: {
          project_uuid: string;
        };
        Returns: {
          project_id: string;
          project_name: string;
          project_description: string | null;
          project_status: string;
          project_created_at: string;
          project_updated_at: string;
          slide_id: string | null;
          slide_title: string | null;
          slide_content: any;
          slide_order_index: number | null;
          slide_created_at: string | null;
          slide_updated_at: string | null;
        }[];
      };
      get_project_slide_count: {
        Args: {
          project_uuid: string;
        };
        Returns: number;
      };
    };
    Enums: {
      [_ in never]: never;
    };
  };
}

// –¢–∏–ø—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row'];
export type Enums<T extends keyof Database['public']['Enums']> = Database['public']['Enums'][T];

// –¢–∏–ø—ã –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export type ProjectWithSlides = Tables<'projects'> & {
  slides: Tables<'slides'>[];
};

export type SlideWithProject = Tables<'slides'> & {
  project: Tables<'projects'>;
};

// –¢–∏–ø—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏
export type ProjectInsert = Database['public']['Tables']['projects']['Insert'];
export type SlideInsert = Database['public']['Tables']['slides']['Insert'];

// –¢–∏–ø—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
export type ProjectUpdate = Database['public']['Tables']['projects']['Update'];
export type SlideUpdate = Database['public']['Tables']['slides']['Update'];
`;

  const outputPath = path.join(__dirname, '../src/types/supabase.ts');
  fs.writeFileSync(outputPath, typesContent);
  console.log('‚úÖ Types generated successfully at:', outputPath);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateTypesFromSupabase();
